1) package
üí° –í Go –ø—Ä–∏–Ω—è—Ç–æ:

–∏–º—è –ø–∞–∫–µ—Ç–∞ = –∏–º—è –ø–∞–ø–∫–∏

–º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏

–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤

1.1 —É –ø–∞–∫–µ—Ç–∞ —Å–Ω–∞—Ä—É–∂–∏ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
type Config struct { ... } // ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–Ω–∞—Ä—É–∂–∏
func Load() *Config { ... } // ‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–Ω–∞—Ä—É–∂–∏

func load() { ... } // ‚ùå –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è (–≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞ config)

===>
import cfg "microservice-template/internal/config"
cfg.Load()

1.2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è init()):
import _ "microservice-template/internal/config"
(–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—ã–∑–≤–∞—Ç—å init() –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç –Ω–∞–ø—Ä—è–º—É—é)

2) –ò–º–ø–æ—Ä—Ç—ã:
import (
	// 1. —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã Go
	"fmt"
	"log"
	"net/http"

	// 2. –≤–Ω–µ—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
	"github.com/gorilla/mux"
	"github.com/joho/godotenv"

	// 3. –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
	"go-template/internal/config"
	"go-template/internal/db"
	"go-template/internal/http"
)

3) –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç
–°–∏–º–≤–æ–ª	  –ó–Ω–∞—á–µ–Ω–∏–µ	                –ü—Ä–∏–º–µ—Ä	              –û–ø–∏—Å–∞–Ω–∏–µ
*T	      —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–∏–ø T	      *Config	              —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç
&x	      –≤–∑—è—Ç—å –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π x  &Config{...}	        —Å–æ–∑–¥–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å
x := *ptr	—Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å	  fmt.Println(ptr.Port)	–¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ —Å—Å—ã–ª–∫–µ

example:
func setPort(cfg Config) {
    cfg.Port = "9000" // –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—è
}

func setPortPtr(cfg *Config) {
    cfg.Port = "9000" // –∏–∑–º–µ–Ω–∏—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª
}

func main() {
    cfg := Config{Port: "8080"}

    setPort(cfg)
    fmt.Println(cfg.Port) // => "8080" (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)

    setPortPtr(&cfg)
    fmt.Println(cfg.Port) // => "9000" (–∏–∑–º–µ–Ω–∏–ª–æ—Å—å!)
}

4) —Ä–∞–∑–Ω–∏—Ü–∞ fmt –∏ log
fmt.Errorf() —Å–æ–∑–¥–∞—ë—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë
log.Fatal() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –µ—ë, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É

5) nil
var p *int              // —É–∫–∞–∑–∞—Ç–µ–ª—å
var s []string          // —Å—Ä–µ–∑
var m map[string]int    // —Å–ª–æ–≤–∞—Ä—å (map)
var ch chan int         // –∫–∞–Ω–∞–ª
var err error           // –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

fmt.Println(p == nil)   // true
fmt.Println(s == nil)   // true
fmt.Println(m == nil)   // true
fmt.Println(ch == nil)  // true
fmt.Println(err == nil) // true

6) –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º–∞ (if initialization statement):
if db, err := sql.Open("postgres", url); err != nil {
  return nil, err
}

–Ω–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ if,
–∏ —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å db –¥–∞–ª—å—à–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏.

7) defer –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ç–≤–æ—ë–º —Å–ª—É—á–∞–µ ‚Äî –∏–∑ Run()).

–¢–æ –µ—Å—Ç—å:

—Å—Ç—Ä–æ–∫–∞ defer database.Close() –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É,

–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –≤ ‚Äú–æ—á–µ—Ä–µ–¥—å‚Äù –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ,

–∏ Go –≤—ã–∑–æ–≤–µ—Ç database.Close() –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ Run(),
–¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—à–∏–±–∫–∞ –∏–ª–∏ return —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–Ω—å—à–µ.